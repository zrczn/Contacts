// <auto-generated />
using System;
using Contacts.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Contacts.Persistence.Migrations
{
    [DbContext(typeof(ContactsDatabaseContext))]
    [Migration("20231210190659_migrationone")]
    partial class migrationone
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Contacts.Domain.DbEntites.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("ParentContactId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentContactId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b115b8d-598c-4433-9883-4f5f55f03f17"),
                            Name = "sluzbowy"
                        },
                        new
                        {
                            Id = new Guid("1b5638a1-7ef2-4fb9-a8a2-a751dd81349e"),
                            Name = "prywatny"
                        },
                        new
                        {
                            Id = new Guid("5215fe15-0dc9-4ad9-9742-4711823232e9"),
                            Name = "inny"
                        },
                        new
                        {
                            Id = new Guid("551a3bb1-f066-4b0a-bb42-a7f76db5a258"),
                            Name = "sluzbowy"
                        },
                        new
                        {
                            Id = new Guid("83e618be-4c4c-4162-a6e8-296586b82cb8"),
                            Name = "szef",
                            ParentContactId = new Guid("551a3bb1-f066-4b0a-bb42-a7f76db5a258")
                        },
                        new
                        {
                            Id = new Guid("c5c0f6a1-4f25-47d0-9dd1-f713c92d754a"),
                            Name = "klient",
                            ParentContactId = new Guid("551a3bb1-f066-4b0a-bb42-a7f76db5a258")
                        });
                });

            modelBuilder.Entity("Contacts.Domain.DbEntites.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d050e44d-8a08-4e4c-931b-bdb120354dfa"),
                            ContactId = new Guid("83e618be-4c4c-4162-a6e8-296586b82cb8"),
                            DateOfBirth = new DateTime(1990, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Test1@gmail.com",
                            FirstName = "Test1",
                            LastName = "LastName1",
                            Password = "haslo1",
                            PhoneNumber = 0
                        },
                        new
                        {
                            Id = new Guid("60594a88-5b2e-4c4c-9de1-f84ddc673b9c"),
                            ContactId = new Guid("83e618be-4c4c-4162-a6e8-296586b82cb8"),
                            DateOfBirth = new DateTime(1995, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "Test2@gmail.com",
                            FirstName = "Test2",
                            LastName = "LastName2",
                            Password = "haslo2",
                            PhoneNumber = 111111111
                        });
                });

            modelBuilder.Entity("Contacts.Domain.DbEntites.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("176281dc-738d-4cc2-a9c1-ee3e0bea1dce"),
                            RoleType = "User"
                        });
                });

            modelBuilder.Entity("Contacts.Domain.DbEntites.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ca801fb2-176c-4fbf-97eb-3f65c13dc202"),
                            Login = "TestUser",
                            Password = "0db32429d0398d23872b01db915daf6d6e75015eab57f2a43b2952a70efe79da",
                            RoleId = new Guid("176281dc-738d-4cc2-a9c1-ee3e0bea1dce")
                        });
                });

            modelBuilder.Entity("Contacts.Domain.DbEntites.Contact", b =>
                {
                    b.HasOne("Contacts.Domain.DbEntites.Contact", "ContactRel")
                        .WithMany("Contacts")
                        .HasForeignKey("ParentContactId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ContactRel");
                });

            modelBuilder.Entity("Contacts.Domain.DbEntites.Person", b =>
                {
                    b.HasOne("Contacts.Domain.DbEntites.Contact", "Contact")
                        .WithMany("Persons")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("Contacts.Domain.DbEntites.User", b =>
                {
                    b.HasOne("Contacts.Domain.DbEntites.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Contacts.Domain.DbEntites.Contact", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Persons");
                });

            modelBuilder.Entity("Contacts.Domain.DbEntites.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
